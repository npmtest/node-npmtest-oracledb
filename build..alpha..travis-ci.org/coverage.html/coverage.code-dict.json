{"/home/travis/build/npmtest/node-npmtest-oracledb/test.js":"/* istanbul instrument in package npmtest_oracledb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-oracledb/lib.npmtest_oracledb.js":"/* istanbul instrument in package npmtest_oracledb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_oracledb = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_oracledb = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-oracledb/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-oracledb && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_oracledb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_oracledb\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_oracledb.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_oracledb.rollup.js'] =\n            local.assetsDict['/assets.npmtest_oracledb.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_oracledb.__dirname + '/lib.npmtest_oracledb.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-oracledb/node_modules/oracledb/index.js":"module.exports = require('./lib/oracledb.js');\n","/home/travis/build/npmtest/node-npmtest-oracledb/node_modules/oracledb/lib/oracledb.js":"/* Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved. */\n\n/******************************************************************************\n *\n * You may not use the identified files except in compliance with the Apache\n * License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *****************************************************************************/\n\n'use strict';\n\nvar oracledbCLib;\nvar oracledbInst;\nvar Lob = require('./lob.js').Lob;\nvar pool = require('./pool.js');\nvar connection = require('./connection.js');\nvar nodbUtil = require('./util.js');\nvar createPoolPromisified;\nvar getConnectionPromisified;\nvar poolCache = {};\nvar tempUsedPoolAliases = {};\nvar defaultPoolAlias = 'default';\n\ntry {\n  oracledbCLib =  require('../build/Release/oracledb');\n} catch (err) {\n  if (err.code !== 'MODULE_NOT_FOUND') {\n    throw err;\n  } else {\n    try {\n      oracledbCLib = require('../build/Debug/oracledb');\n    } catch (err) {\n      if (err.code !== 'MODULE_NOT_FOUND') {\n        throw err;\n      } else {\n        throw new Error(nodbUtil.getErrorMessage('NJS-045'));\n      }\n    }\n  }\n}\n\noracledbCLib.Oracledb.prototype.newLob = function(iLob) {\n  return new Lob(iLob, null, oracledbInst);\n};\n\n// This createPool function is used the override the createPool method of the\n// Oracledb class, which is defined in the C layer. The override allows us to do\n// things like extend out the pool instance prior to passing it to the caller.\nfunction createPool(poolAttrs, createPoolCb) {\n  var self = this;\n  var poolAlias;\n\n  // Initial argument count and type checks are done first and throw in the same\n  // call stack.\n  nodbUtil.assert(arguments.length === 2, 'NJS-009');\n  nodbUtil.assert(nodbUtil.isObject(poolAttrs), 'NJS-006', 1);\n  nodbUtil.assert(typeof createPoolCb === 'function', 'NJS-006', 2);\n\n  // Additional validations should pass errors via the callback. Need to ensure\n  // that errors are raised prior to actually creating the pool via _createPool.\n  if (poolAttrs.poolAlias !== undefined) {\n    if (typeof poolAttrs.poolAlias !== 'string' || poolAttrs.poolAlias.length === 0) {\n      createPoolCb(new Error(nodbUtil.getErrorMessage('NJS-004', 'poolAttrs.poolAlias')));\n      return;\n    }\n\n    poolAlias = poolAttrs.poolAlias;\n  } else if (poolAttrs.poolAlias === undefined\n    && !poolCache[defaultPoolAlias]\n    && !tempUsedPoolAliases[defaultPoolAlias]\n  ) {\n    poolAlias = defaultPoolAlias;\n  }\n\n  if (poolCache[poolAlias] || tempUsedPoolAliases[poolAlias]) {\n    createPoolCb(new Error(nodbUtil.getErrorMessage('NJS-046', poolAlias)));\n    return;\n  }\n\n  // Need to prevent another call in the same stack from succeeding, otherwise\n  // two pools could be created with the same poolAlias and the second one that\n  // comes back would overwrite the first in the cache.\n  if (poolAlias) {\n    tempUsedPoolAliases[poolAlias] = true;\n  }\n\n  self._createPool(poolAttrs, function(err, poolInst) {\n    if (err) {\n      // We need to free this up since the creation of the pool failed.\n      if (poolAlias) {\n        delete tempUsedPoolAliases[poolAlias];\n      }\n\n      createPoolCb(err);\n\n      return;\n    }\n\n    if (poolAlias) {\n      poolCache[poolAlias] = poolInst;\n\n      // It's now safe to remove this alias from the tempUsedPoolAliases.\n      delete tempUsedPoolAliases[poolAlias];\n    }\n\n    pool.extend(poolInst, poolAttrs, poolAlias, self);\n\n    poolInst.on('_after_close', function() {\n      var pool = this;\n\n      if (pool.poolAlias) {\n        delete poolCache[pool.poolAlias];\n      }\n    });\n\n    createPoolCb(null, poolInst);\n  });\n}\n\ncreatePoolPromisified = nodbUtil.promisify(createPool);\n\n// The getPool function is a synchronous method used to retrieve pools from the\n// pool cache.\nfunction getPool(poolAlias) {\n  var pool;\n\n  nodbUtil.assert(arguments.length < 2, 'NJS-009');\n\n  if (poolAlias) {\n    nodbUtil.assert(typeof poolAlias === 'string' || typeof poolAlias === 'number', 'NJS-006', 1);\n  }\n\n  poolAlias = poolAlias || defaultPoolAlias;\n\n  pool = poolCache[poolAlias];\n\n  if (!pool) {\n    throw new Error(nodbUtil.getErrorMessage('NJS-047', poolAlias));\n  }\n\n  return pool;\n}\n\n// This getConnection function is used the override the getConnection method of the\n// Oracledb class, which is defined in the C layer. The override allows us to do\n// things like extend out the connection instance prior to passing it to the caller.\nfunction getConnection(a1, a2) {\n  var self = this;\n  var pool;\n  var poolAlias;\n  var connAttrs;\n  var getConnectionCb;\n\n  nodbUtil.assert(arguments.length < 3, 'NJS-009');\n\n  // Verify the number and types of arguments, then initialize the local poolAlias,\n  // connAttrs, and getConnectionCb variables based on the arguments.\n  switch (arguments.length) {\n    case 1:\n      nodbUtil.assert(typeof a1 === 'function', 'NJS-006', 1);\n\n      poolAlias = defaultPoolAlias;\n      getConnectionCb = a1;\n\n      break;\n    case 2:\n      nodbUtil.assert(typeof a1 === 'string' || nodbUtil.isObject(a1), 'NJS-006', 1);\n      nodbUtil.assert(typeof a2 === 'function', 'NJS-006', 2);\n\n      if (typeof a1 === 'string') {\n        poolAlias = a1;\n      } else if (nodbUtil.isObject(a1)) {\n        connAttrs = a1;\n\n        if (connAttrs.poolAlias) {\n          poolAlias = connAttrs.poolAlias;\n        }\n      }\n\n      getConnectionCb = a2;\n\n      break;\n  }\n\n  // Proceed to execution based on values in local variables. Look for the poolAlias\n  // first and only attempt to use connAttrs if the poolAlias isn't set.\n  if (poolAlias) {\n    pool = poolCache[poolAlias];\n\n    if (!pool) {\n      getConnectionCb(new Error(nodbUtil.getErrorMessage('NJS-047', poolAlias)));\n      return;\n    }\n\n    pool.getConnection(getConnectionCb);\n  } else {\n    self._getConnection(connAttrs, function(err, connInst) {\n      if (err) {\n        getConnectionCb(err);\n        return;\n      }\n\n      connection.extend(connInst, self);\n\n      getConnectionCb(null, connInst);\n    });\n  }\n}\n\ngetConnectionPromisified = nodbUtil.promisify(getConnection);\n\n// The extend method is used to extend the Oracledb instance from the C layer with\n// custom properties and method overrides. References to the original methods are\n// maintained so they can be invoked by the overriding method at the right time.\nfunction extend(oracledb) {\n  // Using Object.defineProperties to add properties to the Oracledb instance with\n  // special properties, such as enumerable but not writable. A number of constants\n  // (uppercase names) are added for use in various method calls.\n  Object.defineProperties(\n    oracledb,\n    {\n      _oracledb: { // Known to be used in util.js' promisify function.\n        value: oracledb\n      },\n      DEFAULT: {\n        value: 0,\n        enumerable: true\n      },\n      DB_TYPE_VARCHAR: {\n        value: 1,\n        enumerable: true\n      },\n      DB_TYPE_NUMBER: {\n        value: 2,\n        enumerable: true\n      },\n      DB_TYPE_DATE: {\n        value: 12,\n        enumerable: true\n      },\n      DB_TYPE_RAW: {\n        value: 23,\n        enumerable: true\n      },\n      DB_TYPE_CHAR: {\n        value: 96,\n        enumerable: true\n      },\n      DB_TYPE_BINARY_FLOAT: {\n        value: 100,\n        enumerable: true\n      },\n      DB_TYPE_BINARY_DOUBLE: {\n        value: 101,\n        enumerable: true\n      },\n      DB_TYPE_ROWID: {\n        value: 104,\n        enumerable: true\n      },\n      DB_TYPE_CLOB: {\n        value: 112,\n        enumerable: true\n      },\n      DB_TYPE_BLOB: {\n        value: 113,\n        enumerable: true\n      },\n      DB_TYPE_TIMESTAMP: {\n        value: 187,\n        enumerable: true\n      },\n      DB_TYPE_TIMESTAMP_TZ: {\n        value: 188,\n        enumerable: true\n      },\n      DB_TYPE_TIMESTAMP_LTZ: {\n        value: 232,\n        enumerable: true\n      },\n      STRING: {\n        value: 2001,\n        enumerable: true\n      },\n      NUMBER: {\n        value: 2002,\n        enumerable: true\n      },\n      DATE: {\n        value: 2003,\n        enumerable: true\n      },\n      CURSOR: {\n        value: 2004,\n        enumerable: true\n      },\n      BUFFER: {\n        value: 2005,\n        enumerable: true\n      },\n      CLOB: {\n        value: 2006,\n        enumerable: true\n      },\n      BLOB: {\n        value: 2007,\n        enumerable: true\n      },\n      BIND_IN: {\n        value: 3001,\n        enumerable: true\n      },\n      BIND_INOUT: {\n        value: 3002,\n        enumerable: true\n      },\n      BIND_OUT: {\n        value: 3003,\n        enumerable: true\n      },\n      ARRAY: {\n        value: 4001,\n        enumerable: true\n      },\n      OBJECT: {\n        value: 4002,\n        enumerable: true\n      },\n      Promise: {\n        value: global.Promise,\n        enumerable: true,\n        writable: true\n      },\n      Oracledb: {\n        value: oracledbCLib.Oracledb,\n        enumerable: true\n      },\n      Connection: {\n        value: oracledbCLib.Connection,\n        enumerable: true\n      },\n      Lob: {\n        value: Lob,\n        enumerable: true\n      },\n      Pool: {\n        value: oracledbCLib.Pool,\n        enumerable: true\n      },\n      ResultSet: {\n        value: oracledbCLib.ResultSet,\n        enumerable: true\n      },\n      queueRequests: {\n        value: true,\n        enumerable: true,\n        writable: true\n      },\n      queueTimeout: {\n        value: 60000,\n        enumerable: true,\n        writable: true\n      },\n      _createPool: {\n        value: oracledb.createPool\n      },\n      createPool: {\n        value: createPoolPromisified,\n        enumerable: true,\n        writable: true\n      },\n      getPool: {\n        value: getPool,\n        enumerable: true,\n        writable: true\n      },\n      _getConnection: {\n        value: oracledb.getConnection\n      },\n      getConnection: {\n        value: getConnectionPromisified,\n        enumerable: true,\n        writable: true\n      }\n    }\n  );\n}\n\noracledbInst = new oracledbCLib.Oracledb();\n\nextend(oracledbInst);\n\nmodule.exports = oracledbInst;\n","/home/travis/build/npmtest/node-npmtest-oracledb/node_modules/oracledb/lib/lob.js":"/* Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved. */\n\n/******************************************************************************\n *\n * You may not use the identified files except in compliance with the Apache\n * License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *****************************************************************************/\n\n'use strict';\n\nvar Duplex = require('stream').Duplex;\nvar util = require('util');\nvar nodbUtil = require('./util.js');\nvar closePromisified;\n\nutil.inherits(Lob, Duplex);\n\n// The Lob class is used to support the streaming of LOB data to/from the database.\nfunction Lob(iLob, opt, oracledb) {\n  Duplex.call(this, opt);\n\n  this.iLob = iLob;\n\n  Object.defineProperties(\n    this,\n    {\n      _oracledb: { // _oracledb property used by promisify () in util.js\n        value: oracledb\n      },\n      _autoCloseLob: { // Tells whether to close at the end of stream or not\n        value: iLob.autoCloseLob,\n        writable: false\n      },\n      chunkSize: {\n        value: iLob.chunkSize,\n        writable: false\n      },\n      length: {\n        get: function() {\n          return iLob.length;\n        }\n      },\n      pieceSize: {\n        get: function() {\n          return iLob.pieceSize;\n        },\n        set: function(newPieceSize) {\n          iLob.pieceSize = newPieceSize;\n        }\n      },\n      type: {\n        get: function() {\n          return iLob.type;\n        }\n      },\n      close: {\n        value: closePromisified,\n        enumerable: true,\n        writable: true\n      }\n    });\n\n  if (this._autoCloseLob) {\n    this.once('finish', this._closeSync);\n  }\n}\n\nLob.prototype._read = function() {\n  var self = this;\n\n  self.iLob.read(\n    function(err, str) {\n      if (err) {\n        if (self._autoCloseLob) {\n          // Ignore if any error occurs during close\n          // Emits 'close' event after closing LOB\n          self._closeSync();\n        }\n\n        self.emit('error', err);\n        return;\n      }\n\n      self.push(str);\n\n      if (self._autoCloseLob) {\n        if (!str) {\n          process.nextTick(function() {\n            err = self._closeSync(); // Emits 'close' event after closing LOB\n\n            if (err) {\n              self.emit('error', err);\n              return;\n            }\n          });\n        }\n      }\n    }\n  );\n};\n\nLob.prototype._write = function(data, encoding, cb) {\n  var self = this;\n\n  self.iLob.write(\n    data,\n    function(err) {\n      if (err) {\n        self._closeSync();   // Ignore if any error occurs during close\n        cb(err);\n        return;\n      }\n\n      cb();\n    }\n  );\n};\n\n// This function will be deprecated in the future\n// This internal function used to close the LOB at the end of writable\n// stream in synchronus way to avoid race condition between this function and\n// application's listener function on 'finish' event.\nLob.prototype._closeSync = function() {\n  var self = this;\n\n  if (self.iLob !== null) {\n    try {\n      self.iLob.release();\n    } catch(err) {\n      self.iLob = null;\n      return err;\n    }\n\n    self.emit('close');\n  }\n};\n\nLob.prototype.close = function(closeCb) {\n  var self = this;\n\n  nodbUtil.assert(arguments.length === 1, 'NJS-009');\n  nodbUtil.assert(typeof closeCb === 'function', 'NJS-006', 1);\n\n  // Return if LOB already closed to support multiple close() calls should be\n  // no-op\n  if (!self.iLob.valid) {\n    closeCb(null);\n    return;\n  }\n\n  self.iLob.close(function(err) {\n    if (!err) {\n      self.emit('close');\n    }\n\n    closeCb(err);\n  });\n};\n\nclosePromisified = nodbUtil.promisify(Lob.prototype.close);\n\nmodule.exports.Lob = Lob;\n","/home/travis/build/npmtest/node-npmtest-oracledb/node_modules/oracledb/lib/util.js":"/* Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved. */\n\n/******************************************************************************\n *\n * You may not use the identified files except in compliance with the Apache\n * License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *****************************************************************************/\n\n'use strict';\n\nvar util = require('util');\n\nvar EventEmitter = require('events').EventEmitter;\nvar eventEmitterKeys = Object.keys(EventEmitter.prototype);\nvar eventEmitterFuncKeys = eventEmitterKeys.filter(function(key) {\n  return typeof EventEmitter.prototype[key] === 'function';\n});\n\n// errorMessages is a temporary duplication of error messages defined in the C\n// layer that will be removed once a function to fetch from the C layer is added.\nvar errorMessages = {\n  'NJS-002': 'NJS-002: invalid pool',\n  'NJS-004': 'NJS-004: invalid value for property %s',\n  'NJS-005': 'NJS-005: invalid value for parameter %d',\n  'NJS-006': 'NJS-006: invalid type for parameter %d',\n  'NJS-009': 'NJS-009: invalid number of parameters',\n  'NJS-014': 'NJS-014: %s is a read-only property',\n  'NJS-037': 'NJS-037: incompatible type of value provided',\n  'NJS-040': 'NJS-040: connection request timeout',\n  'NJS-041': 'NJS-041: cannot convert ResultSet to QueryStream after invoking methods',\n  'NJS-042': 'NJS-042: cannot invoke ResultSet methods after converting to QueryStream',\n  'NJS-043': 'NJS-043: ResultSet already converted to QueryStream',\n  'NJS-045': 'NJS-045: cannot load the oracledb add-on binary',\n  'NJS-046': 'NJS-046: poolAlias \"%s\" already exists in the connection pool cache',\n  'NJS-047': 'NJS-047: poolAlias \"%s\" not found in the connection pool cache'\n};\n\n// makeEventEmitter is used to make class instances inherit from the EventEmitter\n// class. This is needed because we extend instances from the C layer and thus\n// don't have JavaScript constructor functions we can use for more traditional\n// inheritance.\nfunction makeEventEmitter(instance){\n  eventEmitterFuncKeys.forEach(function(key) {\n    instance[key] = EventEmitter.prototype[key];\n  });\n\n  EventEmitter.call(instance);\n}\n\nmodule.exports.makeEventEmitter = makeEventEmitter;\n\n// getErrorMessage is used to get and format error messages to make throwing errors\n// a little more convenient.\nfunction getErrorMessage(errorCode, messageArg1) {\n  if (messageArg1) {\n    return util.format(errorMessages[errorCode], messageArg1);\n  } else {\n    return util.format(errorMessages[errorCode]);\n  }\n}\n\nmodule.exports.getErrorMessage = getErrorMessage;\n\n// assert it typically used in the beginning of public functions to assert preconditions\n// for the function to execute. Most commonly it's used to validate arguments lenght\n// and types and throw an error if they don't match what is expected.\nfunction assert(condition, errorCode, messageArg1) {\n  if (!condition) {\n    throw new Error(getErrorMessage(errorCode, messageArg1));\n  }\n}\n\nmodule.exports.assert = assert;\n\n// The promisify function is used to wrap async methods to add optional promise\n// support. If the last parameter passed to a method is a function, then it is\n// assumed that the callback pattern is being used and the method is invoked as\n// usual. Otherwise a promise is returned and later resolved or rejected based on\n// the return of the method.\nfunction promisify(func) {\n  return function() {\n    var self = this;\n    var args;\n\n    // This/self could refer to the base class instance, pool, connection, etc. All\n    // class instances have a private reference to the base class for convenience.\n    if (!self._oracledb.Promise || typeof arguments[arguments.length - 1] === 'function') {\n      return func.apply(self, arguments);\n    } else {\n      // Converting to an array so we can extend it later with a custom callback\n      args = Array.prototype.slice.call(arguments);\n\n      return new self._oracledb.Promise(function(resolve, reject) {\n        var errorCode;\n\n        try {\n          args[args.length] = function(err, result) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(result);\n            }\n          };\n\n          func.apply(self, args);\n        } catch (err) {\n          errorCode = err.message.substr(0, 7);\n\n          // Check for invalid number or type of parameter(s) as they should be\n          // eagerly thrown.\n          if (errorCode === 'NJS-009' || errorCode === 'NJS-006') {\n            // Throwing the error outside of the promise wrapper so that its not\n            // swallowed up as a rejection.\n            process.nextTick(function() {\n              throw err;\n            });\n          } else {\n            reject(err);\n          }\n        }\n      });\n    }\n  };\n}\n\nmodule.exports.promisify = promisify;\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nmodule.exports.isObject = isObject;\n\nfunction isObjectOrArray(value) {\n  return (value !== null && typeof value === 'object') || Array.isArray(value);\n}\n\nmodule.exports.isObjectOrArray = isObjectOrArray;\n","/home/travis/build/npmtest/node-npmtest-oracledb/node_modules/oracledb/lib/pool.js":"/* Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved. */\n\n/******************************************************************************\n *\n * You may not use the identified files except in compliance with the Apache\n * License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *****************************************************************************/\n\n'use strict';\n\nvar connection = require('./connection.js');\nvar nodbUtil = require('./util.js');\nvar getConnectionPromisified;\nvar terminatePromisified;\n\n// completeConnectionRequest does the actual work of getting a connection from a\n// pool when queuing is enabled. It's abstracted out so it can be called from\n// getConnection and checkRequestQueue constently.\nfunction completeConnectionRequest(getConnectionCb) {\n  var self = this;\n\n  // Incrementing _connectionsOut prior to making the async call to get a connection\n  // to prevent other connection requests from exceeding the poolMax.\n  self._connectionsOut += 1;\n\n  self._getConnection(function(err, connInst) {\n    if (err) {\n      // Decrementing _connectionsOut if we didn't actually get a connection\n      // and then rechecking the queue.\n      self._connectionsOut -= 1;\n\n      if (self._enableStats) {\n        self._totalFailedRequests += 1;\n      }\n\n      process.nextTick(function() {\n        checkRequestQueue.call(self);\n      });\n\n      getConnectionCb(err);\n\n      return;\n    }\n\n    connection.extend(connInst, self._oracledb, self);\n\n    connInst.on('_after_close', function() {\n      self._connectionsOut -= 1;\n\n      checkRequestQueue.call(self);\n    });\n\n    getConnectionCb(null, connInst);\n  });\n}\n\n// Requests for connections from pools are queued by default (can be overridden\n// by setting the poolAttrs property queueRequests to false). checkRequestQueue\n// determines when requests for connections should be completed and cancels any\n// timeout that may have been associated with the request.\nfunction checkRequestQueue() {\n  var self = this;\n  var payload;\n  var waitTime;\n\n  if (self._connRequestQueue.length === 0 || self._connectionsOut === self.poolMax) {\n    return; // no need to do any work\n  }\n\n  payload = self._connRequestQueue.shift();\n\n  if (self._enableStats) {\n    self._totalRequestsDequeued += 1;\n\n    waitTime = Date.now() - payload.enqueuedTime;\n\n    self._totalTimeInQueue += waitTime;\n    self._minTimeInQueue = Math.min(self._minTimeInQueue, waitTime);\n    self._maxTimeInQueue = Math.max(self._maxTimeInQueue, waitTime);\n  }\n\n  if (self._usingQueueTimeout) {\n    clearTimeout(payload.timeoutHandle);\n\n    delete self._connRequestTimersMap[payload.timerIdx];\n    payload.timeoutHandle = null;\n    payload.timerIdx = null;\n  }\n\n  completeConnectionRequest.call(self, payload.getConnectionCb);\n}\n\n// onRequestTimeout is used to prevent requests for connections from sitting in the\n// queue for too long. The number of milliseconds can be set via queueTimeout\n// property of the poolAttrs used when creating a pool.\nfunction onRequestTimeout(timerIdx) {\n  var self = this;\n  var payloadToDequeue = self._connRequestTimersMap[timerIdx];\n  var requestIndex;\n\n  if (payloadToDequeue) {\n    if (self._enableStats) {\n      self._totalRequestTimeouts += 1;\n      self._totalTimeInQueue += Date.now() - payloadToDequeue.enqueuedTime;\n    }\n\n    requestIndex = self._connRequestQueue.indexOf(payloadToDequeue);\n\n    self._connRequestQueue.splice(requestIndex, 1);\n    delete self._connRequestTimersMap[timerIdx];\n\n    payloadToDequeue.getConnectionCb(new Error(nodbUtil.getErrorMessage('NJS-040')));\n  }\n}\n\n// This getConnection function is used the override the getConnection method of the\n// Pool class, which is defined in the C layer. The method will proxy requests\n// directly to the C layer if queueing is disabled. If queueing is enabled and the\n// connections out is under the poolMax then the request will be completed immediately.\n// Otherwise the request will be queued and completed when a connection is avaialble.\nfunction getConnection(getConnectionCb) {\n  var self = this;\n  var payload;\n  var timeoutHandle;\n  var timerIdx;\n\n  nodbUtil.assert(arguments.length === 1, 'NJS-009');\n  nodbUtil.assert(typeof getConnectionCb === 'function', 'NJS-006', 1);\n\n  // Added this check because if the pool isn't valid and we reference self.poolMax\n  // (which is a C layer getter) an error will be thrown.\n  if (!self._isValid) {\n    if (getConnectionCb && typeof getConnectionCb === 'function') {\n      getConnectionCb(new Error(nodbUtil.getErrorMessage('NJS-002')));\n      return;\n    } else {\n      throw new Error(nodbUtil.getErrorMessage('NJS-002'));\n    }\n  }\n\n  if (self._enableStats) {\n    self._totalConnectionRequests += 1;\n  }\n\n  if (self.queueRequests === false) { // queueing is disabled for pool\n    self._getConnection(function(err, connInst) {\n      if (err) {\n        if (self._enableStats) {\n          self._totalFailedRequests += 1;\n        }\n\n        getConnectionCb(err);\n\n        return;\n      }\n\n      connection.extend(connInst, self._oracledb, self);\n\n      getConnectionCb(null, connInst);\n    });\n  } else if (self._connectionsOut < self.poolMax) { // queueing enabled, but not needed\n    completeConnectionRequest.call(self, getConnectionCb);\n  } else { // need to queue the request\n    if (self._usingQueueTimeout) {\n      self._connRequestTimersIdx += 1;\n      timerIdx = self._connRequestTimersIdx;\n\n      timeoutHandle = setTimeout(\n        function() {\n          onRequestTimeout.call(self, timerIdx);\n        },\n        self.queueTimeout\n      );\n    }\n\n    payload = {\n      timerIdx: timerIdx,\n      timeoutHandle: timeoutHandle,\n      getConnectionCb: getConnectionCb\n    };\n\n    if (self._usingQueueTimeout) {\n      self._connRequestTimersMap[timerIdx] = payload;\n    }\n\n    self._connRequestQueue.push(payload);\n\n    if (self._enableStats) {\n      payload.enqueuedTime = Date.now();\n      self._totalRequestsEnqueued += 1;\n      self._maxQueueLength = Math.max(self._maxQueueLength, self._connRequestQueue.length);\n    }\n  }\n}\n\ngetConnectionPromisified = nodbUtil.promisify(getConnection);\n\nfunction terminate(terminateCb) {\n  var self = this;\n\n  nodbUtil.assert(arguments.length === 1, 'NJS-009');\n  nodbUtil.assert(typeof terminateCb === 'function', 'NJS-006', 1);\n\n  self._terminate(function(err) {\n    if (!err) {\n      self._isValid = false;\n\n      self.emit('_after_close', self);\n    }\n\n    terminateCb(err);\n  });\n}\n\nterminatePromisified = nodbUtil.promisify(terminate);\n\n// logStats is used to add a hidden method (_logStats) to each pool instance. This\n// provides an easy way to log out the statistics related information that's collected\n// when _enableStats is set to true when creating a pool. This functionality may\n// be altered or enhanced in the future.\nfunction logStats() {\n  var self = this;\n  var averageTimeInQueue;\n\n  if (!self._isValid) {\n    throw new Error(nodbUtil.getErrorMessage('NJS-002'));\n  }\n\n  if (self._enableStats !== true) {\n    console.log('Pool statistics not enabled');\n    return;\n  }\n\n  averageTimeInQueue = 0;\n\n  if (self.queueRequests && self._totalRequestsEnqueued !== 0) {\n    averageTimeInQueue = Math.round(self._totalTimeInQueue/self._totalRequestsEnqueued);\n  }\n\n  console.log('\\nPool statistics:');\n  console.log('...total up time (milliseconds):', Date.now() - self._createdDate);\n  console.log('...total connection requests:', self._totalConnectionRequests);\n  console.log('...total requests enqueued:', self._totalRequestsEnqueued);\n  console.log('...total requests dequeued:', self._totalRequestsDequeued);\n  console.log('...total requests failed:', self._totalFailedRequests);\n  console.log('...total request timeouts:', self._totalRequestTimeouts);\n  console.log('...max queue length:', self._maxQueueLength);\n  console.log('...sum of time in queue (milliseconds):', self._totalTimeInQueue);\n  console.log('...min time in queue (milliseconds):', self._minTimeInQueue);\n  console.log('...max time in queue (milliseconds):', self._maxTimeInQueue);\n  console.log('...avg time in queue (milliseconds):', averageTimeInQueue);\n  console.log('...pool connections in use:', self.connectionsInUse);\n  console.log('...pool connections open:', self.connectionsOpen);\n  console.log('Related pool attributes:');\n  console.log('...poolAlias:', self.poolAlias);\n  console.log('...queueRequests:', self.queueRequests);\n  console.log('...queueTimeout (milliseconds):', self.queueTimeout);\n  console.log('...poolMin:', self.poolMin);\n  console.log('...poolMax:', self.poolMax);\n  console.log('...poolIncrement:', self.poolIncrement);\n  console.log('...poolTimeout (seconds):', self.poolTimeout);\n  console.log('...poolPingInterval:', self.poolPingInterval);\n  console.log('...stmtCacheSize:', self.stmtCacheSize);\n  console.log('Related environment variables:');\n  console.log('...process.env.UV_THREADPOOL_SIZE:', process.env.UV_THREADPOOL_SIZE);\n}\n\n// The extend method is used to extend Pool instances from the C layer with custom\n// properties, methods, and method overrides. References to the original methods are\n// maintained so they can be invoked by the overriding method at the right time.\nfunction extend(pool, poolAttrs, poolAlias, oracledb) {\n  var queueRequests;\n  var queueTimeout;\n\n  if (typeof poolAttrs.queueRequests !== 'undefined') {\n    queueRequests = poolAttrs.queueRequests;\n  } else {\n    queueRequests = oracledb.queueRequests;\n  }\n\n  if (typeof poolAttrs.queueTimeout !== 'undefined') {\n    queueTimeout = poolAttrs.queueTimeout;\n  } else {\n    queueTimeout = oracledb.queueTimeout;\n  }\n\n  nodbUtil.makeEventEmitter(pool);\n\n  // Using Object.defineProperties to add properties to the Pool instance with special\n  // properties, such as enumerable but not writable.\n  Object.defineProperties(\n    pool,\n    {\n      _oracledb: { // storing a reference to the base instance to avoid circular references with require\n        value: oracledb\n      },\n      queueRequests: { // true will queue requests when conn pool is maxed out\n        enumerable: true,\n        get: function() {\n          return queueRequests;\n        },\n        set: function() {\n          throw new Error(nodbUtil.getErrorMessage('NJS-014', 'queueRequests'));\n        }\n      },\n      queueTimeout: { // milliseconds a connection request can spend in queue before being failed\n        enumerable: true,\n        get: function() {\n          return queueTimeout;\n        },\n        set: function() {\n          throw new Error(nodbUtil.getErrorMessage('NJS-014', 'queueTimeout'));\n        }\n      },\n      _isValid: { // used to ensure operations are not done after terminate\n        value: true,\n        writable: true\n      },\n      _enableStats: { // true means pool stats will be recorded\n        value: poolAttrs._enableStats === true\n      },\n      _logStats: { // output pool stats\n        value: logStats\n      },\n      _createdDate: {\n        value: Date.now()\n      },\n      _totalConnectionRequests: { // total number of pool.getConnection requests\n        value: 0,\n        writable: true\n      },\n      _totalRequestsEnqueued: { // number of pool.getConnection requests added to queue\n        value: 0,\n        writable: true\n      },\n      _totalRequestsDequeued: { // number of pool.getConnection requests removed from queue because a pool connection became available\n        value: 0,\n        writable: true\n      },\n      _totalFailedRequests: { // number of pool.getConnection requests that failed at the C layer\n        value: 0,\n        writable: true\n      },\n      _totalRequestTimeouts: { // number of queued pool.getConnection requests that timed out without being satisfied\n        value: 0,\n        writable: true\n      },\n      _totalTimeInQueue: { // sum of time in milliseconds that all pool.getConnection requests spent in the queue\n        value: 0,\n        writable: true\n      },\n      _maxQueueLength: { // maximum length of pool queue\n        value: 0,\n        writable: true\n      },\n      _minTimeInQueue: { // shortest amount of time (milliseconds) that any pool.getConnection request spent in queue\n        value: 0,\n        writable: true\n      },\n      _maxTimeInQueue: { // longest amount of time (milliseconds) that any pool.getConnection request spent in queue\n        value: 0,\n        writable: true\n      },\n      _usingQueueTimeout: {\n        value: queueTimeout !== 0\n      },\n      _connectionsOut: { // number of connections checked out from the pool. Must be inc/dec in the main thread in JS\n        value: 0,\n        writable: true\n      },\n      _connRequestQueue: {\n        value: [],\n        writable: true\n      },\n      _connRequestTimersIdx: {\n        value: 0,\n        writable: true\n      },\n      _connRequestTimersMap: {\n        value: {},\n        writable: true\n      },\n      _getConnection: {\n        value: pool.getConnection\n      },\n      poolAlias: {\n        enumerable: true,\n        get: function() {\n          return poolAlias;\n        },\n        set: function() {\n          throw new Error(nodbUtil.getErrorMessage('NJS-014', 'poolAlias'));\n        }\n      },\n      getConnection: {\n        value: getConnectionPromisified,\n        enumerable: true,\n        writable: true\n      },\n      _terminate: {\n        value: pool.terminate\n      },\n      terminate: {\n        value: terminatePromisified,\n        enumerable: true,\n        writable: true\n      },\n      close: { // alias for terminate\n        value: terminatePromisified,\n        enumerable: true,\n        writable: true\n      }\n    }\n  );\n}\n\nmodule.exports.extend = extend;\n","/home/travis/build/npmtest/node-npmtest-oracledb/node_modules/oracledb/lib/connection.js":"/* Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved. */\n\n/******************************************************************************\n *\n * You may not use the identified files except in compliance with the Apache\n * License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *****************************************************************************/\n\n'use strict';\n\nvar resultset = require('./resultset.js');\nvar QueryStream = require('./querystream.js');\nvar nodbUtil = require('./util.js');\nvar executePromisified;\nvar commitPromisified;\nvar createLobPromisified;\nvar rollbackPromisified;\nvar releasePromisified;\nvar breakPromisified;\n\n// The queryStream function is similar to execute except that it immediately\n// returns a QueryStream.\nfunction queryStream(sql, binding, options) {\n  var self = this;\n  var stream;\n\n  nodbUtil.assert(arguments.length > 0 && arguments.length < 4, 'NJS-009');\n  nodbUtil.assert(typeof sql === 'string', 'NJS-006', 1);\n\n  if (binding) {\n    nodbUtil.assert(nodbUtil.isObjectOrArray(binding), 'NJS-006', 2);\n  }\n\n  if (options) {\n    nodbUtil.assert(nodbUtil.isObject(options), 'NJS-006', 3);\n  }\n\n  binding = binding || [];\n  options = options || {};\n\n  options.resultSet = true;\n\n  stream = new QueryStream(null, self._oracledb);\n\n  self._execute(sql, binding, options, function(err, result) {\n    if (err) {\n      stream._open(err, null);\n    } else {\n      resultset.extend(result.resultSet, self._oracledb);\n      stream._open(null, result.resultSet);\n    }\n  });\n\n  return stream;\n}\n\n// This execute function is used to override the execute method of the Connection\n// class, which is defined in the C layer. The override allows us to do things\n// like extend out the resultSet instance prior to passing it to the caller.\nfunction execute(a1, a2, a3, a4) {\n  var self = this;\n  var executeCb;\n  var custExecuteCb;\n\n  nodbUtil.assert(arguments.length > 1 && arguments.length < 5, 'NJS-009');\n  nodbUtil.assert(typeof a1 === 'string', 'NJS-006', 1);\n\n  switch (arguments.length) {\n    case 2:\n      nodbUtil.assert(typeof a2 === 'function', 'NJS-006', 2);\n      break;\n    case 3:\n      nodbUtil.assert(nodbUtil.isObjectOrArray(a2), 'NJS-006', 2);\n      nodbUtil.assert(typeof a3 === 'function', 'NJS-006', 3);\n      break;\n    case 4:\n      nodbUtil.assert(nodbUtil.isObjectOrArray(a2), 'NJS-006', 2);\n      nodbUtil.assert(nodbUtil.isObject(a3), 'NJS-006', 3);\n      nodbUtil.assert(typeof a4 === 'function', 'NJS-006', 4);\n      break;\n  }\n\n  custExecuteCb = function(err, result) {\n    var outBindsKeys;\n    var outBindsIdx;\n\n    if (err) {\n      executeCb(err);\n      return;\n    }\n\n    // Need to extend resultsets which may come from either the query results\n    // or outBinds.\n    if (result.resultSet) {\n      resultset.extend(result.resultSet, self._oracledb);\n    } else if (result.outBinds) {\n      outBindsKeys = Object.keys(result.outBinds);\n\n      for (outBindsIdx = 0; outBindsIdx < outBindsKeys.length; outBindsIdx += 1) {\n        if (result.outBinds[outBindsKeys[outBindsIdx]] instanceof self._oracledb.ResultSet) {\n          resultset.extend(result.outBinds[outBindsKeys[outBindsIdx]], self._oracledb);\n        }\n      }\n    }\n\n    executeCb(null, result);\n  };\n\n  switch (arguments.length) {\n    case 4:\n      executeCb = a4;\n      self._execute.call(self, a1, a2, a3, custExecuteCb);\n      break;\n    case 3:\n      executeCb = a3;\n      self._execute.call(self, a1, a2, custExecuteCb);\n      break;\n    case 2:\n      executeCb = a2;\n      self._execute.call(self, a1, custExecuteCb);\n      break;\n  }\n}\n\nexecutePromisified = nodbUtil.promisify(execute);\n\n// This commit function is just a place holder to allow for easier extension later.\nfunction commit(commitCb) {\n  var self = this;\n\n  nodbUtil.assert(arguments.length === 1, 'NJS-009');\n  nodbUtil.assert(typeof commitCb === 'function', 'NJS-006', 1);\n\n  self._commit.apply(self, arguments);\n}\n\ncommitPromisified = nodbUtil.promisify(commit);\n\n// This createLob function is just a place holder to allow for easier extension later.\nfunction createLob(type, createLobCb) {\n  var self = this;\n\n  nodbUtil.assert(arguments.length === 2, 'NJS-009');\n  nodbUtil.assert(typeof createLobCb === 'function', 'NJS-006', 2);\n\n  self._createLob.apply(self, arguments);\n}\n\ncreateLobPromisified = nodbUtil.promisify(createLob);\n\n// This rollback function is just a place holder to allow for easier extension later.\nfunction rollback(rollbackCb) {\n  var self = this;\n\n  nodbUtil.assert(arguments.length === 1, 'NJS-009');\n  nodbUtil.assert(typeof rollbackCb === 'function', 'NJS-006', 1);\n\n  self._rollback.apply(self, arguments);\n}\n\nrollbackPromisified = nodbUtil.promisify(rollback);\n\n// This release function is used to override the release method of the Connection\n// class, which is defined in the C layer.\nfunction release(releaseCb) {\n  var self = this;\n\n  nodbUtil.assert(arguments.length === 1, 'NJS-009');\n  nodbUtil.assert(typeof releaseCb === 'function', 'NJS-006', 1);\n\n  self._release(function(err) {\n    if (!err) {\n      self.emit('_after_close');\n    }\n\n    releaseCb(err);\n  });\n}\n\nreleasePromisified = nodbUtil.promisify(release);\n\n// This release function is just a place holder to allow for easier extension later.\n// It's attached to the module as break is a reserved word.\nmodule.break = function(breakCb) {\n  var self = this;\n\n  nodbUtil.assert(arguments.length === 1, 'NJS-009');\n  nodbUtil.assert(typeof breakCb === 'function', 'NJS-006', 1);\n\n  self._break.apply(self, arguments);\n};\n\nbreakPromisified = nodbUtil.promisify(module.break);\n\n// The extend method is used to extend the Connection instance from the C layer with\n// custom properties and method overrides. References to the original methods are\n// maintained so they can be invoked by the overriding method at the right time.\nfunction extend(conn, oracledb, pool) {\n  nodbUtil.makeEventEmitter(conn);\n\n  // Using Object.defineProperties to add properties to the Connection instance with\n  // special properties, such as enumerable but not writable.\n  Object.defineProperties(\n    conn,\n    {\n      _oracledb: { // storing a reference to the base instance to avoid circular references with require\n        value: oracledb\n      },\n      _pool: { // storing a reference to the pool, if any, from which the connection was obtained\n        value: pool\n      },\n      _execute: {\n        value: conn.execute\n      },\n      queryStream: {\n        value: queryStream,\n        enumerable: true,\n        writable: true\n      },\n      execute: {\n        value: executePromisified,\n        enumerable: true,\n        writable: true\n      },\n      _commit: {\n        value: conn.commit\n      },\n      commit: {\n        value: commitPromisified,\n        enumerable: true,\n        writable: true\n      },\n      _createLob: {\n        value: conn.createLob\n      },\n      createLob: {\n        value: createLobPromisified,\n        enumerable: true,\n        writable: true\n      },\n      _rollback: {\n        value: conn.rollback\n      },\n      rollback: {\n        value: rollbackPromisified,\n        enumerable: true,\n        writable: true\n      },\n      _release: {\n        value: conn.release\n      },\n      release: {\n        value: releasePromisified,\n        enumerable: true,\n        writable: true\n      },\n      close: { // alias for release\n        value: releasePromisified,\n        enumerable: true,\n        writable: true\n      },\n      _break: {\n        value: conn.break\n      },\n      break: {\n        value: breakPromisified,\n        enumerable: true,\n        writable: true\n      }\n    }\n  );\n}\n\nmodule.exports.extend = extend;\n","/home/travis/build/npmtest/node-npmtest-oracledb/node_modules/oracledb/lib/resultset.js":"/* Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved. */\n\n/******************************************************************************\n *\n * You may not use the identified files except in compliance with the Apache\n * License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *****************************************************************************/\n\n'use strict';\n\nvar QueryStream = require('./querystream.js');\nvar nodbUtil = require('./util.js');\nvar closePromisified;\nvar getRowPromisified;\nvar getRowsPromisified;\n\n// This close function is just a place holder to allow for easier extension later.\nfunction close(closeCb) {\n  var self = this;\n\n  nodbUtil.assert(arguments.length === 1, 'NJS-009');\n  nodbUtil.assert(typeof closeCb === 'function', 'NJS-006', 1);\n\n  if (self._convertedToStream) {\n    closeCb(new Error(nodbUtil.getErrorMessage('NJS-042')));\n    return;\n  }\n\n  self._processingStarted = true;\n\n  self._close(function(err) {\n\n    closeCb(err);\n  });\n}\n\nclosePromisified = nodbUtil.promisify(close);\n\n// This getRow function is just a place holder to allow for easier extension later.\nfunction getRow(getRowCb) {\n  var self = this;\n\n  nodbUtil.assert(arguments.length === 1, 'NJS-009');\n  nodbUtil.assert(typeof getRowCb === 'function', 'NJS-006', 1);\n\n  if (self._convertedToStream) {\n    getRowCb(new Error(nodbUtil.getErrorMessage('NJS-042')));\n    return;\n  }\n\n  self._processingStarted = true;\n\n  self._getRow.apply(self, arguments);\n}\n\ngetRowPromisified = nodbUtil.promisify(getRow);\n\n// This getRows function is just a place holder to allow for easier extension later.\nfunction getRows(numRows, getRowsCb) {\n  var self = this;\n\n  nodbUtil.assert(arguments.length === 2, 'NJS-009');\n  nodbUtil.assert(typeof numRows === 'number', 'NJS-006', 1);\n  nodbUtil.assert(typeof getRowsCb === 'function', 'NJS-006', 2);\n\n  if (self._convertedToStream) {\n    getRowsCb(new Error(nodbUtil.getErrorMessage('NJS-042')));\n    return;\n  }\n\n  self._processingStarted = true;\n\n  self._getRows.apply(self, arguments);\n}\n\ngetRowsPromisified = nodbUtil.promisify(getRows);\n\nfunction toQueryStream() {\n  var self = this;\n  var stream;\n\n  nodbUtil.assert(arguments.length === 0, 'NJS-009');\n\n  if (self._processingStarted) {\n    throw new Error(nodbUtil.getErrorMessage('NJS-041'));\n  }\n\n  if (self._convertedToStream) {\n    throw new Error(nodbUtil.getErrorMessage('NJS-043'));\n  }\n\n  self._convertedToStream = true;\n\n  stream = new QueryStream(self, self._oracledb);\n\n  return stream;\n}\n\n// The extend method is used to extend the ResultSet instance from the C layer with\n// custom properties and method overrides. References to the original methods are\n// maintained so they can be invoked by the overriding method at the right time.\nfunction extend(resultSet, oracledb) {\n  // Using Object.defineProperties to add properties to the ResultSet instance with\n  // special properties, such as enumerable but not writable.\n  Object.defineProperties(\n    resultSet,\n    {\n      _oracledb: { // storing a reference to the base instance to avoid circular references with require\n        value: oracledb\n      },\n      _processingStarted: { // used to prevent conversion to stream after invoking methods\n        value: false,\n        writable: true\n      },\n      _convertedToStream: { // used to prevent invoking methods after conversion to stream\n        value: false,\n        writable: true\n      },\n      _close: {\n        value: resultSet.close\n      },\n      close: {\n        value: closePromisified,\n        enumerable: true,\n        writable: true\n      },\n      _getRow: {\n        value: resultSet.getRow\n      },\n      getRow: {\n        value: getRowPromisified,\n        enumerable: true,\n        writable: true\n      },\n      _getRows: {\n        value: resultSet.getRows\n      },\n      getRows: {\n        value: getRowsPromisified,\n        enumerable: true,\n        writable: true\n      },\n      toQueryStream: {\n        value: toQueryStream,\n        enumerable: true,\n        writable: true\n      }\n    }\n  );\n}\n\nmodule.exports.extend = extend;\n","/home/travis/build/npmtest/node-npmtest-oracledb/node_modules/oracledb/lib/querystream.js":"/* Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved. */\n\n/******************************************************************************\n *\n * You may not use the identified files except in compliance with the Apache\n * License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *****************************************************************************/\n\n'use strict';\n\nvar util = require('util');\nvar Readable = require('stream').Readable;\n\n// This class was originally based on https://github.com/sagiegurari/simple-oracledb/blob/master/lib/resultset-read-stream.js\nfunction QueryStream(resultSet, oracledb) {\n  var self = this;\n\n  Object.defineProperties(\n    self,\n    {\n      _oracledb: { // storing a reference to the base instance to avoid circular references with require\n        value: oracledb\n      },\n      _resultSet: {\n        value: resultSet,\n        writable: true\n      },\n      _fetchedRows: { // a local cache of rows fetched from a call to resultSet.getRows\n        value: [],\n        writable: true\n      },\n      _fetchedAllRows: { // used to avoid an unnecessary call to resultSet.getRows\n        value: false,\n        writable: true\n      },\n      _fetching: { // used to serialize method calls on the resultset\n        value: false,\n        writable: true\n      },\n      _closed: { // used to track that the stream is closed\n        value: false,\n        writable: true\n      }\n    }\n  );\n\n  Readable.call(self, {\n    objectMode: true\n  });\n\n  if (self._resultSet) { // If true, no need to invoke _open, we are ready to go.\n    self.emit('metadata', self._resultSet.metaData);\n\n    self.emit('open');\n  }\n}\n\nutil.inherits(QueryStream, Readable);\n\n// The _open method is only meant to be called when a QueryStream is created\n// but not passed in the resultSet during initialization. In those cases the\n// QueryStream object will have been returned immediately and the _open method\n// will be called later to pass the resultset (or error getting the resultset)\n// along.\nQueryStream.prototype._open = function(err, rs) {\n  var self = this;\n\n  if (err) {\n    self.emit('error', err);\n    return;\n  }\n\n  self._resultSet = rs;\n\n  self.emit('metadata', self._resultSet.metaData);\n\n  // Trigger the event listener that may have been added in _read now that the\n  // resultset is ready.\n  self.emit('open');\n};\n\n// The stream _read implementation which fetches the next row from the resultset.\nQueryStream.prototype._read = function () {\n  var self = this;\n  var fetchCount;\n\n  if (!self._resultSet) {\n    // Still waiting on the resultset, add an event listener to retry when ready\n    return self.once('open', function() {\n      self._read();\n    });\n  }\n\n  if (self._closed) {\n    return;\n  }\n\n  if (self._fetchedRows.length) {\n    // We have rows already fetched that need to be pushed\n    self.push(self._fetchedRows.shift());\n  } else if (self._fetchedAllRows) {\n    // Calling the C layer close directly to avoid assertions on the public method\n    self._resultSet._close(function(err) {\n      if (err) {\n        self.emit('error', err);\n        return;\n      }\n\n      // Signal the end of the stream\n      self.push(null);\n    });\n  } else {\n    // Using _fetching to indicate that the resultset is working to avoid potential\n    // errors related to close w/conncurrent operations on resultsets\n    self._fetching = true;\n\n    fetchCount = self._oracledb.maxRows || 100;\n\n    // Calling the C layer getRows directly to avoid assertions on the public method\n    self._resultSet._getRows(fetchCount, function(err, rows) {\n      if (err) {\n        // We'll return the error from getRows, but first try to close the resultSet.\n        // Calling the C layer close directly to avoid assertions on the public method\n        self._resultSet._close(function() {\n          self.emit('error', err);\n        });\n\n        return;\n      }\n\n      self._fetching = false;\n\n      // Close may have been called while the resultset was fetching.\n      if (self._closed) {\n        // Trigger the event listener that may have been added in close now that\n        // the resultset has finished working.\n        self.emit('_doneFetching');\n        return;\n      }\n\n      self._fetchedRows = rows;\n\n      if (self._fetchedRows.length < fetchCount) {\n        self._fetchedAllRows = true;\n      }\n\n      if (self._fetchedRows.length) {\n        self.push(self._fetchedRows.shift());\n      } else { // No more rows to fetch\n        // Calling the C layer close directly to avoid assertions on the public method\n        self._resultSet._close(function(err) {\n          if (err) {\n            self.emit('error', err);\n            return;\n          }\n\n          // Signal the end of the stream\n          self.push(null);\n        });\n      }\n    });\n  }\n};\n\n// The close method is not a standard method on stream instances in Node.js but\n// it was added to provide developers with a means of stopping the flow of data\n// and closing the stream without having to allow the entire resultset to finish\n// streaming.\nfunction close(callback) {\n  var self = this;\n\n  // Setting _closed early to prevent _read invocations from being processed and\n  // to allow _doneFetching to be emitted if needed.\n  self._closed = true;\n\n  // Node.js 0.10 didn't have an isPaused method that could be used to prevent\n  // an unnecessary pause event from being emitted (added in 0.11.14). We'll\n  // check for the existence of such a method and use it if possible, otherwise\n  // we'll just call pause. This could be simplified a little when support for\n  // Node.js 0.10 is dropped.\n  if (typeof self.isPaused === 'function' && !self.isPaused()) {\n    self.pause();\n  } else {\n    self.pause();\n  }\n\n  // We can't close the resultset if it's currently fetching. Add a listener\n  // to call close when the resulset is done fetching.\n  if (self._fetching) {\n    self.once('_doneFetching', function() {\n      self._close(callback);\n    });\n\n    return;\n  }\n\n  if (callback) {\n    self.once('close', callback);\n  }\n\n  // It's possible for close to be called very early, even before the resultset\n  // has been set via _open (if needed).\n  if (!self._resultSet) {\n    self.emit('close');\n  } else {\n    // Calling the C layer close directly to avoid assertions on the public method\n    self._resultSet._close(function(err) {\n      if (err) {\n        self.emit('error', err);\n        return;\n      }\n\n      self.emit('close');\n    });\n  }\n}\n\n// Exposing close as a private method for now.\nObject.defineProperty(\n  QueryStream.prototype,\n  '_close',\n  {\n    value: close,\n    writable: true\n  }\n);\n\nmodule.exports = QueryStream;\n"}